/*******************************************************************************
 * OLHUD generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2021 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OLHUD extends UDKHUD
    transient
    native
    config(Game)
    hidecategories(Navigation);

enum EMenuType
{
    EMT_MainMenu,
    EMT_PauseMenu,
    EMT_TabMenu,
    EMT_RecordingMenu,
    EMT_EvidenceMenu,
    EMT_Credits,
    EMT_MAX
};

enum EHUDMessageType
{
    EHMT_None,
    EHMT_Objective,
    EHMT_Tutorial,
    EHMT_Generic,
    EHMT_Interaction,
    EHMT_Subtitle,
    EHMT_ShakeMouse,
    EHMT_ShakeStick,
    EHMT_MAX
};

struct native SubtitleData
{
    var string Text;
    var Actor Speaker;
    var float EffectiveDistance;
    var float TimeFired;
    var bool bUseAsImportant;
    var bool bOccluded;

    structdefaultproperties
    {
        // Object Offset:0x03456529
        Text=""
        Speaker=none
        EffectiveDistance=0.0
        TimeFired=0.0
        bUseAsImportant=false
        bOccluded=false
    }
};

struct native GenericMessage
{
    var init string MessageText;
    var float RemainingTime;
    var OLHUD.EHUDMessageType MessageType;

    structdefaultproperties
    {
        // Object Offset:0x001D9C8F
        MessageText=""
        RemainingTime=0.0
        MessageType=EHUDMessageType.EHMT_None
    }
};

var OLBot CurrentDebugBot;
var bool bGammaCalibrationOpen;
var bool bSplashScreenOpen;
var bool bSplashScreenReady;
var bool bGameOver;
var config bool bShowCrosshair;
var bool bCrosshairDesired;
var bool bAlwaysShowPrompts;
var config bool bShowSubtitles;
var config bool bForcePS4UI;
var bool bLostFocus;
var OLFXManager.EPPSMode PreGammaPPSMode;
var OLHUD.EHUDMessageType CurrentMessageType;
var float SplashScreenActivatedTimestamp;
var float CrosshairOpacity;
var float LastCrosshairUpdateRealTime;
var float InteractionCrosshairPct;
var float NewObjectiveTimestamp;
var Vector NewObjectiveHeroPos;
var config float NewObjectiveZoneRadius;
var float ShowInventoryTimestamp;
var float LastCamCycleTime;
var name LatestRecordingName;
var float LatestRecordingTimer;
var name LatestDocumentName;
var float LatestDocumentTimer;
var float NewObjectiveTimer;
var float LatestCheckpointTimer;
var const float SubtitleMaxDistance;
var const float SubtitleMaxDistanceOccluded;
var const float SubtitleOcclusionThreshold;
var const float SubtitleObstructionThreshold;
var array<SubtitleData> SubtitleQueue;
var string CurrentSubtitle;
var Texture2D InventoryBackgoundImg;
var Texture2D NormalCrosshairImage;
var Texture2D InteractionCrosshairImage;
var Texture2D SplashScreenImage;
var Texture2D GameOverImage;
var Texture2D GameOverImageDemo;
var Font SmallFont;
var Font MediumFont;
var Font LargeFont;
var Font HugeFont;
var string CurrentObjectiveText;
var string CurrentMessageText;
var string LastUntranslatedMessageText;
var string CachedTranslatedMessageText;
var array<GenericMessage> GenericMessages;
var OLUIFrontEnd MenuManager;
var OLCamcorderHud CamcorderHUD;

// Export UOLHUD::execDraw(FFrame&, void* const)
native function Draw();

// Export UOLHUD::execShowingFullScreenOverlay(FFrame&, void* const)
native function bool ShowingFullScreenOverlay();

// Export UOLHUD::execSetGammaCalibrationActive(FFrame&, void* const)
native function SetGammaCalibrationActive(bool bActive);

// Export UOLHUD::execNotifyGameSaved(FFrame&, void* const)
native function NotifyGameSaved();

exec function DebugNextAI()
{
}

function ShowDebugInfo(out float out_YL, out float out_YPos)
{
}

delegate bool CanUnpauseInPauseMenu()
{
}

event bool IsInPauseMenu()
{
}

event bool IsMainMenuOpen()
{
}

event bool IsOnMainMenuScreen()
{
}

event bool IsInCreditsMenu()
{
}

event bool IsAMenuOpen()
{
}

exec function ReloadMenu()
{
}

exec function ShowMainMenu()
{
}

exec function ShowMenu()
{
}

exec function ShowTabMenu()
{
}

exec function ShowRecordingMenu()
{
}

exec function ShowEvidenceMenu()
{
}

// Export UOLHUD::execCanShowSubMenu(FFrame&, void* const)
native function bool CanShowSubMenu();

// Export UOLHUD::execMuteSelectSound(FFrame&, void* const)
native function MuteSelectSound(optional float MuteTime)
{
}

// Export UOLHUD::execPostSoundEventSelect(FFrame&, void* const)
native function PostSoundEventSelect();

// Export UOLHUD::execPostSoundEventEnter(FFrame&, void* const)
native function PostSoundEventEnter();

event ShowMenuType(OLHUD.EMenuType MenuType)
{
}

exec function HideMenu()
{
}

event ShowMessage(OLHUD.EHUDMessageType MessageType, string MessageText)
{
}

event HideMessage()
{
}

event ShowObjective(string ObjectiveText)
{
}

event HideObjective()
{
}

event ShowSubtitle(string MessageText)
{
}

event HideSubtitle()
{
}

event bool ShowingSubtitle()
{
}

function HideHUDMessages()
{
}

function ShowHUDMessages()
{
}

event OnLostFocusPause(bool bEnable)
{
}

function GamepadConfigChanged()
{
}

defaultproperties
{
    // Object Offset:0x001DB765
    bShowCrosshair=true
    bShowSubtitles=true
    NewObjectiveTimestamp=-1.0
    NewObjectiveZoneRadius=350.0
    LastCamCycleTime=-1.0
    SubtitleMaxDistance=1000.0
    SubtitleMaxDistanceOccluded=500.0
    SubtitleOcclusionThreshold=0.10
    SubtitleObstructionThreshold=0.10
    NormalCrosshairImage=Texture2D'Engine_MI_Shaders.Textures.Bokeh'
    InteractionCrosshairImage=Texture2D'OLFrontEnd.InteractiveCrosshair-01'
    SplashScreenImage=Texture2D'Engine_MI_Shaders.T_Base_Tile_Variation'
    GameOverImage=Texture2D'OLFrontEnd.GameOver'
    GameOverImageDemo=Texture2D'OLFrontEnd.OutlastLogoDemo'
    SmallFont=MultiFont'UI_Fonts_Final.HUD.MF_Small'
    MediumFont=MultiFont'UI_Fonts_Final.HUD.MF_Medium'
    LargeFont=MultiFont'UI_Fonts_Final.HUD.MF_Large'
    HugeFont=MultiFont'UI_Fonts_Final.HUD.MF_Huge'
    SoundEventSelect=AkEvent'Menu.PARAMETER_Move'
    SoundEventEnter=AkEvent'Menu.PARAMETER_Valid'
}