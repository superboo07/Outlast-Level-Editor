/*******************************************************************************
 * OLEnemyPawn generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OLEnemyPawn extends OLPawn
	dependsOn( OLAIContextualVOAsset )
    native(AI)
    config(Enemy)
    hidecategories(Navigation)
    implements(Interface_NavMeshPathObstacle,Interface_NavMeshPathObject);

enum EWeaponType
{
    WeaponType_None,
    WeaponType_Blunt,
    WeaponType_Stab,
    WeaponType_MAX
};

enum EWeapon
{
    Weapon_None,
    Weapon_Knife,
    Weapon_ButcherKnife,
    Weapon_BoneShear,
    Weapon_Machete,
    Weapon_NightStick,
    Weapon_Pipe,
    Weapon_WoodPlank,
    Weapon_CannibalDrill,
    Weapon_MAX
};

enum ERotationMode
{
    RM_FaceVelocity,
    RM_FaceTarget,
    RM_Explicit,
    RM_MAX
};

enum EEnemyMode
{
    EM_Patrol,
    EM_Investigate,
    EM_Chase,
    EM_SqueezeGrabLeft,
    EM_SqueezeGrabRight,
    EM_MAX
};

enum EAttackSide
{
    EAS_Left,
    EAS_Right,
    EAS_Middle,
    EAS_MAX
};

enum EMoveSpeedMode
{
    EMSM_Default,
    EMSM_Override,
    EMSM_RubberBanding,
    EMSM_MAX
};

struct native WeaponTypeData
{
    var StaticMesh Mesh;
    var OLEnemyPawn.EWeaponType Type;

    structdefaultproperties
    {
        Mesh=none
        Type=EWeaponType.WeaponType_None
    }
};

struct native EnemyModifiers
{
    var() bool bShouldAttack;
    var() bool bUseKillingBlow;
    var() bool bAlwaysLookAtPlayer;
    var() bool bDisableRepulsion;
    var() bool bSpawnWithNavMeshObstacle;
    var() bool bUseForMusic;
    var() bool bForceUseForStressBreath;
    var() bool bDisableKnockbackFromPlayer;
    var() bool bUseGroup;
    var deprecated StaticMesh WeaponMeshToUse;
    var() OLEnemyPawn.EWeapon WeaponToUse;
    var() bool bInterruptVOOnChase;
    var() bool bAttackOnProximity;

    structdefaultproperties
    {
        bShouldAttack=false
        bUseKillingBlow=false
        bAlwaysLookAtPlayer=false
        bDisableRepulsion=false
        bSpawnWithNavMeshObstacle=false
        bUseForMusic=false
        bForceUseForStressBreath=false
        bDisableKnockbackFromPlayer=false
        bUseGroup=true
        WeaponToUse=EWeapon.Weapon_None
        bInterruptVOOnChase=true
        bAttackOnProximity=false
    }
};

struct native NanoSwarmEmitter
{
    var export editinline ParticleSystemComponent Emitter;
    var name BoneName;

    structdefaultproperties
    {
        Emitter=none
        BoneName=None
    }
};

struct native VOInstance
{
    var array<bool> EventsPlayed;
    var int NumUnplayedEvents;

    structdefaultproperties
    {
        EventsPlayed=none
        NumUnplayedEvents=0
    }
};

struct native DelayedVO
{
    var float TimeRemaining;
    var EVOContext VOContext;

    structdefaultproperties
    {
        TimeRemaining=0.0
        VOContext=EVOContext.EVOC_Undefined
    }
};

struct native SpeedValues
{
    var config float PatrolSpeed;
    var config float InvestigateSpeed;
    var config float ChaseSpeed;

    structdefaultproperties
    {
        PatrolSpeed=0.0
        InvestigateSpeed=0.0
        ChaseSpeed=0.0
    }
};

struct native VisionCone
{
    var config float Distance;
    var config float PeekingDistance;
    var config float HorizontalAngle;
    var config float VerticalAngle;

    structdefaultproperties
    {
        Distance=0.0
        PeekingDistance=0.0
        HorizontalAngle=0.0
        VerticalAngle=0.0
    }
};

struct native VisionParameters
{
    var config float WideConeReactionTime;
    var config float LoseTargetTime;
    var config VisionCone NarrowCone;
    var config VisionCone WideCone;
    var config float CloseDistance;
    var config float CrouchMultiplier;

    structdefaultproperties
    {
        WideConeReactionTime=0.0
        LoseTargetTime=0.0
        NarrowCone=(Distance=0.0,PeekingDistance=0.0,HorizontalAngle=0.0,VerticalAngle=0.0)
        WideCone=(Distance=0.0,PeekingDistance=0.0,HorizontalAngle=0.0,VerticalAngle=0.0)
        CloseDistance=0.0
        CrouchMultiplier=0.0
    }
};

var(NPC) class<AIController> NPCController;
var OLBot Bot;
var export editinline StaticMeshComponent WeaponMesh;
var array<AnimSet> WeaponAnimSets;
var bool bUsingWeapon;
var bool bHasWeaponEquipped;
var transient bool bNavMeshRegistered;
var bool bHasPreferredPath;
var bool bIsAnimatingFullBody;
var bool bAnimRootMotionActive;
var bool bCastShadowInNV;
var bool bLeftAnim;
var bool bBackAnim;
var bool bIdleSoundPlaying;
var config bool bAttackUseQuickAttack;
var config bool bInvestigateLockers;
var config bool bInvestigateBeds;
var config bool bDrawSteeringDebug;
var config bool bUsePreferredPaths;
var const bool bUseForMusic;
var const bool bMusicInPatrol;
var const bool bUseAIGroup;
var const bool bCanVault;
var const bool bCanThrow;
var const bool bUsesDirectionalAttacks;
var const bool bCanBeKnockedback;
var const bool bUseFirstInvestigationInFront;
var const bool bCloseDoorInPatrol;
var const bool bUsesDoorBashLoop;
var const bool bUseAvoidSystem;
var OLEnemyPawn.EWeaponType WeaponType;
var OLEnemyPawn.EWeapon CurrentWeapon;
var OLEnemyPawn.ERotationMode RotationMode;
var OLEnemyPawn.EEnemyMode EnemyMode;
var OLEnemyPawn.EAttackSide AttackSide;
var OLEnemyPawn.EMoveSpeedMode MoveSpeedMode;
var WeaponTypeData Weapons[EWeapon];
var EnemyModifiers Modifiers;
var OLBTBehaviorTree BehaviorTree;
var transient Vector LastNavMeshCheckLocation;
var transient float LastNavMeshObstacleRegisterTime;
var() float NavMeshObstacleRegistrationTime;
var Vector CurrentMovePathStart;
var array<Vector> CurrentMovePath;
var int CurrentMovePathIdx;
var Vector LastMovePathPoint;
var Actor FocusTarget;
var array<Vector2D> CRPathSegments;
var array<Vector2D> CRPathSubSegments;
var int CRPathLastIndex;
var const float MaxPathSegmentRatio;
var const int CRPathNumSubSegments;
var const float PathMaxElasticityDistance;
var const float PathMinElasticityDistance;
var array<Vector> MovingTestPoints;
var float MovingTestTimer;
var const int NumMovingTestPoints;
var const float MovingTestLength;
var Vector TargetVelocity;
var float TargetYaw;
var array<OLAISteering> SteeringBehaviors;
var transient Vector CurrentRepulsion;
var Vector PreferredPathAnchor;
var Vector PreferredPathDirection;
var OLPreferredPathMarker PreferredPath;
var float SmoothedVelocityYaw;
var name LastPlayedAnim;
var array<AnimSet> SpawnerAnimSets;
var AnimNodeSlot TopHalfSlot;
var OLAnimCustomBlend TopHalfBlend;
var OLAnimBlendByEnemyMode AnimNodeSelectEnemyMode;
var SkelControlLookAt HeadTrackingLookAt;
var array<NanoSwarmEmitter> NanoSwarmEmitters;
var const float FallingDeathZ;
var float MeshZOffset;
var Vector MeshOffset2D;
var transient Rotator TurnStart;
var transient float OldTurnAmount;
var transient float TurnAmount;
var transient float ThrowRotation;
var float SpecialMoveBlendAlpha;
var float SpecialMoveRate;
var float SpecialMoveStalledTimestamp;
var OLAIContextualVOAsset VOAsset;
var transient array<VOInstance> VOInstances;
var transient array<DelayedVO> DelayedVOContexts;
var SpeedValues NormalSpeedValues;
var SpeedValues DarknessSpeedValues;
var SpeedValues ElectricitySpeedValues;
var float MoveSpeed_Target;
var SpeedValues MoveSpeed_Override;
var float MoveSpeed_AccelRate;
var float MoveSpeed_DecelRate;
var float MoveSpeed_SpeedNoVisibility;
var float MoveSpeed_ChaseSpeedAtMinDist;
var float MoveSpeed_ChaseSpeedAtMaxDist;
var float MoveSpeed_ChaseDistMin;
var float MoveSpeed_ChaseDistMax;
var config SpeedValues NrmNormalSpeedValues;
var config SpeedValues NrmDarknessSpeedValues;
var config SpeedValues NrmElectricitySpeedValues;
var config SpeedValues HardNormalSpeedValues;
var config SpeedValues HardDarknessSpeedValues;
var config SpeedValues HardElectricitySpeedValues;
var config float NrmEnemyHearingThreshold;
var config float HardEnemyHearingThreshold;
var VisionParameters LightUnAwareVisionParameters;
var VisionParameters NightvisionUnAwareVisionParameters;
var VisionParameters DarkUnAwareVisionParameters;
var VisionParameters LightAwareVisionParameters;
var VisionParameters NightvisionAwareVisionParameters;
var VisionParameters DarkAwareVisionParameters;
var config VisionParameters NrmLightUnAwareVisionParameters;
var config VisionParameters NrmNightvisionUnAwareVisionParameters;
var config VisionParameters NrmDarkUnAwareVisionParameters;
var config VisionParameters NrmLightAwareVisionParameters;
var config VisionParameters NrmNightvisionAwareVisionParameters;
var config VisionParameters NrmDarkAwareVisionParameters;
var config VisionParameters HardLightUnAwareVisionParameters;
var config VisionParameters HardNightvisionUnAwareVisionParameters;
var config VisionParameters HardDarkUnAwareVisionParameters;
var config VisionParameters HardLightAwareVisionParameters;
var config VisionParameters HardNightvisionAwareVisionParameters;
var config VisionParameters HardDarkAwareVisionParameters;
var config int NumOfDoorBashLoops;
var config float DoorClosedPathMultiplier;
var config float MoveReactionTime;
var config float WaitLeaveNormalMultiplier;
var config float WaitLeaveChaseMultiplier;
var config float UnstuckCheckTime;
var config float LookAheadDistance;
var config float LookAheadUpdateTime;
var config float AttackRange;
var config float AttackGrabChance;
var float AttackNormalDamage;
var float AttackThrowDamage;
var config float NrmAttackNormalDamage;
var config float NrmAttackThrowDamage;
var config float HardAttackNormalDamage;
var config float HardAttackThrowDamage;
var config float AttackNormalRecovery;
var config float AttackThrowRecovery;
var config float AttackNormalKnockbackPower;
var config float AttackPushKnockbackPower;
var float DoorBashDamage;
var config float NrmDoorBashDamage;
var config float HardDoorBashDamage;
var config float DoorBashKnockbackPower;
var float VaultDamage;
var config float NrmVaultDamage;
var config float HardVaultDamage;
var config float VaultKnockbackPower;
var config float AttackSqueezeRange;
var config float AttackSqueezeCycleTime;
var config float AttackIdleTimeAfterGrab;
var config float AttackQuickSpeedThreshold;
var config float AttackQuickAngleThreshold;
var config float AttackQuickDistanceThreshold;
var config int InvestigationNumPointsGenerated;
var config float InvestigationMinRadius;
var config float InvestigationMaxRadius;
var config float InvestigationMaxPathDistance;
var config float InvestigationFirstPointAngle;
var config float InvestigationNormalWeight;
var config float InvestigationLockerWeight;
var config float InvestigationLockerOccupiedWeight;
var config float InvestigationBedWeight;
var config float InvestigationBedOccupiedWeight;
var config float InvestigateBedAlternateChance;
var config float InvestigationFindHiddenPlayerProbability;
var const name VisionBone;
var const name WeaponAttachBone;
var const name HipBone;
var const float AttackSqueezeVisibleRangeToNode;
var const float AttackSqueezeHiddenRangeToTarget;
var const float DoorOpenDistancePush;
var const float DoorOpenDistancePull;
var const float DoorBreakDistance;
var const float DoorChasingBreakDistance;
var const float DoorBreakFinishDistance;
var const float NormalDropDownDistance;
var const float NormalClimbUpDistance;
var const float ChasingDropDownDistance;
var const float ChasingClimbUpDistance;
var const float WallBashDistance;
var const float WallBashTime;
var const float TableBashDistance;
var const Vector DoorOpenEndOffsetPushLeft;
var const Vector DoorOpenEndOffsetPushRight;
var const Vector DoorOpenEndOffsetPullLeft;
var const Vector DoorOpenEndOffsetPullRight;
var const Vector DoorOpenEndOffsetPushLeftWithClose;
var const Vector DoorOpenEndOffsetPushRightWithClose;
var const Vector DoorOpenEndOffsetPullLeftWithClose;
var const Vector DoorOpenEndOffsetPullRightWithClose;
var const Vector DoorBashEndOffset;
var const Vector LockerInvestigateOffset;
var const Vector LockerAttackOffset;
var const Vector BedInvestigateOffsetLeft;
var const Vector BedInvestigateOffsetRight;
var const Vector BedAttackOffsetLeft;
var const Vector BedAttackOffsetRight;
var const float GrabTargetVelocity;
var const Vector SqueezeAttackOffset;
var const float SwarmXplodBackOffset;
var const float GrabDistance;
var const float KillDistance;
var const float ThrowStartPlayerDistance;
var const float ThrowStartPlayerZOffset;
var const class<DamageType> InstantKillDmgType;
var const class<DamageType> AttackNormalDmgType;
var const class<DamageType> AttackThrowDmgType;
var const float AvoidRatePatrol;
var const float AvoidRateInvestigate;
var const float AvoidRateChase;
var const string SoundSwitchDoorMaterial;
var const string SoundSwitchParamDMWood;
var const string SoundSwitchParamDMMetal;
var const string SoundSwitchParamDMSecurity;
var const string SoundSwitchParamDMBigPrison;
var const name SoundSwitchWeaponType;
var const name SoundSwitchWeaponTypeParams[EWeapon];
var const name AnimNameClimbUp50;
var const name AnimNameClimbUp100;
var const name AnimNameClimbDown50;
var const name AnimNameClimbDown100;
var const name AnimNameClimbUp50Chase;
var const name AnimNameClimbUp100Chase;
var const name AnimNameClimbDown50Chase;
var const name AnimNameClimbDown100Chase;
var const name AnimNameVault;
var const name AnimNameOpenDoorLeftPull;
var const name AnimNameOpenDoorLeftPush;
var const name AnimNameOpenDoorRightPull;
var const name AnimNameOpenDoorRightPush;
var const name AnimNameOpenDoorLeftPullWithClose;
var const name AnimNameOpenDoorLeftPushWithClose;
var const name AnimNameOpenDoorRightPullWithClose;
var const name AnimNameOpenDoorRightPushWithClose;
var const name AnimNameBashDoor;
var const name AnimNameBashDoorStart;
var const name AnimNameBashDoorLoop;
var const name AnimNameBashDoorEnd;
var const name AnimNameBashDoorEndEquip;
var const name AnimNameBashDoorFailed;
var const name AnimNameBashDoorChase;
var const name AnimNameNanoDoor;
var const name AnimNameAttack;
var const name AnimNameAttackLeft;
var const name AnimNameAttackRight;
var const name AnimNameAttackMiddle;
var const name AnimNameGrabSqueezeRightStart;
var const name AnimNameGrabSqueezeRightStartToWait;
var const name AnimNameGrabSqueezeRightWait;
var const name AnimNameGrabSqueezeRightWaitToFail;
var const name AnimNameGrabSqueezeRightWaitToSuccess;
var const name AnimNameGrabSqueezeRightSuccess;
var const name AnimNameGrabSqueezeLeftStart;
var const name AnimNameGrabSqueezeLeftStartToWait;
var const name AnimNameGrabSqueezeLeftWait;
var const name AnimNameGrabSqueezeLeftWaitToFail;
var const name AnimNameGrabSqueezeLeftWaitToSuccess;
var const name AnimNameGrabSqueezeLeftSuccess;
var const name AnimNameBashWallChase;
var const name AnimNameBashTableChase;
var const name AnimNameIdle;
var const name AnimNameIdlePose;
var const name AnimNameTurnOnSpotLeft90;
var const name AnimNameTurnOnSpotLeft180;
var const name AnimNameTurnOnSpotRight90;
var const name AnimNameTurnOnSpotRight180;
var const name AnimNameIdleChase;
var const name AnimNameIdlePoseChase;
var const name AnimNameTurnOnSpotLeft90Chase;
var const name AnimNameTurnOnSpotLeft180Chase;
var const name AnimNameTurnOnSpotRight90Chase;
var const name AnimNameTurnOnSpotRight180Chase;
var const name AnimNameGrabNormal;
var const name AnimNameGrabCrouch;
var const name AnimNameGrabBedLeft;
var const name AnimNameGrabBedRight;
var const name AnimNameGrabUnder;
var const name AnimNameGrabLocker;
var const name AnimNameThrowPlayer;
var const name AnimNameThrowPlayerLeft90;
var const name AnimNameThrowPlayerLeft180;
var const name AnimNameThrowPlayerRight90;
var const name AnimNameThrowPlayerRight180;
var const name AnimNameSearchLocker;
var const name AnimNameSearchBedLeft;
var const name AnimNameSearchBedLeftAlt;
var const name AnimNameSearchBedRight;
var const name AnimNameSearchBedRightAlt;
var const name AnimNameGrabFatality;
var const name AnimNameRunChaseToIdleChase;
var const name AnimNameWalkToIdle;
var const name AnimNamePushForward;
var const name AnimNamePushLeft;
var const name AnimNamePushRight;
var const name AnimNameAvoidLeft;
var const name AnimNameAvoidRight;
var const name AnimNameKnockbackLeft;
var const name AnimNameKnockbackRight;
var const name AnimNameEquipWeapon;
var const name AnimNameUnequipWeapon;
var const name AnimNameChokeFatality;
var const name AnimNameBackstabFatality;
var const name AnimNameClubFatalityBack;
var const name AnimNameClubFatalityFront;
var const name AnimNameStabChopFatality;
var const name AnimNameFatalityXplodeBack;
var const name AnimNameFatalityXplode;
var const name AnimNameFatalityLocker;
var const name AnimNameDisturbedFrontLeft;
var const name AnimNameDisturbedFrontRight;
var const name AnimNameDisturbedLeft90;
var const name AnimNameDisturbedLeft180;
var const name AnimNameDisturbedRight90;
var const name AnimNameDisturbedRight180;

// Export UOLEnemyPawn::execRegisterNavMeshObstacle(FFrame&, void* const)
native final function RegisterNavMeshObstacle();

// Export UOLEnemyPawn::execUnregisterNavmeshObstacle(FFrame&, void* const)
native final function UnregisterNavmeshObstacle();

// Export UOLEnemyPawn::execStartSpecialMove(FFrame&, void* const)
native function StartSpecialMove(OLPawn.ESpecialMoveType moveType, optional Vector targetPosition, optional Vector TargetDirection, optional OLPawn.EAdjustPositionTargetType TargetType);

// Export UOLEnemyPawn::execCancelSpecialMove(FFrame&, void* const)
native function CancelSpecialMove();

final function UpdateNavMeshObstacle()
{
}

final function bool HasRegisteredNavMeshRecently()
{
}

function AIStartingMove()
{
}

simulated event PostBeginPlay()
{
}

simulated function ZeroMovementVariables()
{
}

function PossessedBy(Controller C, bool bVehicleTransition)
{
}

simulated event PostInitAnimTree(SkeletalMeshComponent SkelComp)
{
}

event ApplyModifiers(EnemyModifiers NewModifiers)
{
}

function UpdateDifficultyBasedValues()
{
}

simulated event BuildScriptAnimSetList()
{
}

simulated event Destroyed()
{
}

event DamageTarget()
{
}

event DamageTargetRangeStartNotify()
{
}

event DamageTargetRangeTickNotify()
{
}

event BashDoorNotify()
{
}

event BreakDoorNotify()
{
}

event KnockbackStartNotify()
{
}

event KnockbackTickNotify()
{
}

event PushNotify()
{
}

event ResetAnimationMode()
{
}

event ShowWeapon()
{
}

event HideWeapon()
{
}

event ShowWeaponMatinee()
{
}

event HideWeaponMatinee()
{
}

event StartIdleSound()
{
}

event StopIdleSound()
{
}

// Export UOLEnemyPawn::execEnableRootMotion(FFrame&, void* const)
native function EnableRootMotion();

// Export UOLEnemyPawn::execDisableRootMotion(FFrame&, void* const)
native function DisableRootMotion();

function PlayFullBodyAnim(name AnimName, float Rate, optional float BlendInTime, optional float BlendOutTime, optional bool bLooping, optional float StartTime, optional float EndTime)
{
}

// Export UOLEnemyPawn::execTurnOnSpot(FFrame&, void* const)
native function TurnOnSpot(Rotator EndRotation);

// Export UOLEnemyPawn::execStartAvoid(FFrame&, void* const)
native function StartAvoid(OLEnemyPawn OtherPawn);

// Export UOLEnemyPawn::execStartDoorKnockback(FFrame&, void* const)
native function StartDoorKnockback(Vector Direction, bool bLocker);

// Export UOLEnemyPawn::execStartNormalAttack(FFrame&, void* const)
native function StartNormalAttack();

// Export UOLEnemyPawn::execStartDisturbed(FFrame&, void* const)
native function StartDisturbed();

simulated event OnAnimEnd(AnimNodeSequence SeqNode, float PlayedTime, float ExcessTime)
{
}

// Export UOLEnemyPawn::execStartMatinee(FFrame&, void* const)
native function StartMatinee(Vector StartLoc, Rotator StartRot, float BlendTime);

simulated function BeginAIGroup()
{
}

simulated function FinishAIGroup()
{
}

// Export UOLEnemyPawn::execPlayContextualVO(FFrame&, void* const)
native function PlayContextualVO(OLAIContextualVOAsset.EVOContext VOContext, optional float DelayTime);

defaultproperties
{
    NPCController=class'OLBot'
    begin object name=WeaponMeshComponent class=StaticMeshComponent
        StaticMesh=StaticMesh'Weapons.Machete-01'
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__OLEnemyPawn.MyLightEnvironment'
        MotionBlurInstanceScale=0.0
        RBDominanceGroup=20
        bAcceptsDynamicDecals=false
        CastShadow=false
        bUseOnePassLightingOnTranslucency=true
        CollideActors=false
        BlockActors=false
        BlockRigidBody=false
        LightingChannels=(bInitialized=true,Dynamic=true,Skybox=true,Unnamed_1=true,Unnamed_2=true,Unnamed_3=true,Unnamed_4=true,Unnamed_5=true,Unnamed_6=true,Cinematic_1=true,Cinematic_2=true,Cinematic_3=true,Cinematic_4=true,Cinematic_5=true,Dynamic_1=true,Dynamic_2=true,Dynamic_3=true,Dynamic_4=true,Dynamic_5=true,Gameplay_1=true,Gameplay_2=true,Gameplay_3=true,Gameplay_4=true)
    end object
    // Reference: StaticMeshComponent'Default__OLEnemyPawn.WeaponMeshComponent'
    WeaponMesh=WeaponMeshComponent
    bAttackUseQuickAttack=true
    bInvestigateLockers=true
    bInvestigateBeds=true
    bUsePreferredPaths=true
    Weapons[1]=(Mesh=StaticMesh'Weapons.Knife-01',Type=EWeaponType.WeaponType_Stab)
    Weapons[2]=(Mesh=StaticMesh'Weapons.ButcherKnife-01',Type=EWeaponType.WeaponType_Blunt)
    Weapons[3]=(Mesh=StaticMesh'Weapons.bone_shear-01',Type=EWeaponType.WeaponType_Stab)
    Weapons[4]=(Mesh=StaticMesh'Weapons.Machete-01',Type=EWeaponType.WeaponType_Stab)
    Weapons[5]=(Mesh=StaticMesh'Weapons.Nightstick-01',Type=EWeaponType.WeaponType_Blunt)
    Weapons[6]=(Mesh=StaticMesh'Weapons.PipeWeapon-01',Type=EWeaponType.WeaponType_Blunt)
    Weapons[7]=(Mesh=StaticMesh'Weapons.WoodPlankWeapon-01',Type=EWeaponType.WeaponType_Blunt)
    Weapons[8]=(Mesh=StaticMesh'02_Cannibal.cannibal_drill',Type=EWeaponType.WeaponType_Blunt)
    Modifiers=(bShouldAttack=false,bUseKillingBlow=false,bAlwaysLookAtPlayer=false,bDisableRepulsion=false,bSpawnWithNavMeshObstacle=false,bUseForMusic=false,bForceUseForStressBreath=false,bDisableKnockbackFromPlayer=false,bUseGroup=true,WeaponToUse=EWeapon.Weapon_None,bInterruptVOOnChase=true,bAttackOnProximity=false)
    BehaviorTree=OLBTBehaviorTree'02_AI_Behaviors.Default_BT'
    MaxPathSegmentRatio=2.50
    CRPathNumSubSegments=10
    PathMaxElasticityDistance=100.0
    PathMinElasticityDistance=5.0
    NumMovingTestPoints=10
    MovingTestLength=1.0
    FallingDeathZ=-20000.0
    SpecialMoveRate=1.0
    FootStepSound_Run=AkEvent'NPCs_Sounds.Footsteps_Run_NPC'
    NrmNormalSpeedValues=(PatrolSpeed=120.0,InvestigateSpeed=120.0,ChaseSpeed=325.0)
    NrmDarknessSpeedValues=(PatrolSpeed=120.0,InvestigateSpeed=120.0,ChaseSpeed=325.0)
    NrmElectricitySpeedValues=(PatrolSpeed=120.0,InvestigateSpeed=120.0,ChaseSpeed=325.0)
    HardNormalSpeedValues=(PatrolSpeed=120.0,InvestigateSpeed=150.0,ChaseSpeed=375.0)
    HardDarknessSpeedValues=(PatrolSpeed=120.0,InvestigateSpeed=150.0,ChaseSpeed=375.0)
    HardElectricitySpeedValues=(PatrolSpeed=120.0,InvestigateSpeed=150.0,ChaseSpeed=375.0)
    NrmEnemyHearingThreshold=2000.0
    HardEnemyHearingThreshold=3000.0
    NrmLightUnAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=5000.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=120.0,CrouchMultiplier=0.50)
    NrmNightvisionUnAwareVisionParameters=(WideConeReactionTime=3.0,LoseTargetTime=1.0,NarrowCone=(Distance=400.0,PeekingDistance=200.0,HorizontalAngle=20.0,VerticalAngle=60.0),WideCone=(Distance=500.0,PeekingDistance=150.0,HorizontalAngle=30.0,VerticalAngle=60.0),CloseDistance=120.0,CrouchMultiplier=0.50)
    NrmDarkUnAwareVisionParameters=(WideConeReactionTime=3.0,LoseTargetTime=1.0,NarrowCone=(Distance=400.0,PeekingDistance=200.0,HorizontalAngle=20.0,VerticalAngle=60.0),WideCone=(Distance=500.0,PeekingDistance=150.0,HorizontalAngle=30.0,VerticalAngle=60.0),CloseDistance=120.0,CrouchMultiplier=0.50)
    NrmLightAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=5000.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=120.0,CrouchMultiplier=0.50)
    NrmNightvisionAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=5000.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=120.0,CrouchMultiplier=0.50)
    NrmDarkAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=1500.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=120.0,CrouchMultiplier=0.50)
    HardLightUnAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=5000.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=200.0,CrouchMultiplier=0.50)
    HardNightvisionUnAwareVisionParameters=(WideConeReactionTime=3.0,LoseTargetTime=1.0,NarrowCone=(Distance=400.0,PeekingDistance=200.0,HorizontalAngle=20.0,VerticalAngle=60.0),WideCone=(Distance=500.0,PeekingDistance=150.0,HorizontalAngle=30.0,VerticalAngle=60.0),CloseDistance=200.0,CrouchMultiplier=0.50)
    HardDarkUnAwareVisionParameters=(WideConeReactionTime=3.0,LoseTargetTime=1.0,NarrowCone=(Distance=400.0,PeekingDistance=200.0,HorizontalAngle=20.0,VerticalAngle=60.0),WideCone=(Distance=500.0,PeekingDistance=150.0,HorizontalAngle=30.0,VerticalAngle=60.0),CloseDistance=200.0,CrouchMultiplier=0.50)
    HardLightAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=5000.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=200.0,CrouchMultiplier=0.50)
    HardNightvisionAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=5000.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=200.0,CrouchMultiplier=0.50)
    HardDarkAwareVisionParameters=(WideConeReactionTime=2.0,LoseTargetTime=1.50,NarrowCone=(Distance=1500.0,PeekingDistance=500.0,HorizontalAngle=30.0,VerticalAngle=30.0),WideCone=(Distance=800.0,PeekingDistance=200.0,HorizontalAngle=70.0,VerticalAngle=45.0),CloseDistance=200.0,CrouchMultiplier=0.50)
    NumOfDoorBashLoops=3
    DoorClosedPathMultiplier=50.0
    MoveReactionTime=0.70
    WaitLeaveNormalMultiplier=1.0
    WaitLeaveChaseMultiplier=1.0
    UnstuckCheckTime=0.330
    LookAheadDistance=100.0
    LookAheadUpdateTime=0.330
    AttackRange=170.0
    AttackGrabChance=0.50
    NrmAttackNormalDamage=21.0
    NrmAttackThrowDamage=21.0
    HardAttackNormalDamage=21.0
    HardAttackThrowDamage=21.0
    AttackNormalRecovery=2.0
    AttackThrowRecovery=2.0
    AttackNormalKnockbackPower=10.0
    AttackPushKnockbackPower=15.0
    NrmDoorBashDamage=30.0
    HardDoorBashDamage=30.0
    DoorBashKnockbackPower=30.0
    NrmVaultDamage=30.0
    HardVaultDamage=30.0
    VaultKnockbackPower=30.0
    AttackSqueezeRange=175.0
    AttackSqueezeCycleTime=5.0
    AttackQuickSpeedThreshold=225.0
    AttackQuickAngleThreshold=45.0
    AttackQuickDistanceThreshold=100.0
    InvestigationNumPointsGenerated=8
    InvestigationMinRadius=200.0
    InvestigationMaxRadius=600.0
    InvestigationMaxPathDistance=1200.0
    InvestigationFirstPointAngle=60.0
    InvestigationNormalWeight=1.0
    InvestigationLockerWeight=10.0
    InvestigationLockerOccupiedWeight=10.0
    InvestigationBedWeight=10.0
    InvestigationBedOccupiedWeight=10.0
    InvestigationFindHiddenPlayerProbability=0.10
    VisionBone=NPCMedium-Head
    WeaponAttachBone=NPCMedium-R-Hand_aux
    HipBone=NPCMedium
    AttackSqueezeVisibleRangeToNode=200.0
    AttackSqueezeHiddenRangeToTarget=300.0
    DoorOpenDistancePush=50.0
    DoorOpenDistancePull=50.0
    DoorBreakDistance=50.0
    DoorChasingBreakDistance=50.0
    DoorBreakFinishDistance=100.0
    NormalDropDownDistance=50.0
    NormalClimbUpDistance=50.0
    ChasingDropDownDistance=50.0
    ChasingClimbUpDistance=50.0
    WallBashDistance=160.0
    WallBashTime=0.50
    TableBashDistance=281.0
    DoorOpenEndOffsetPushLeft=(X=50.0,Y=0.0,Z=0.0)
    DoorOpenEndOffsetPushRight=(X=50.0,Y=0.0,Z=0.0)
    DoorOpenEndOffsetPullLeft=(X=50.0,Y=0.0,Z=0.0)
    DoorOpenEndOffsetPullRight=(X=50.0,Y=0.0,Z=0.0)
    DoorOpenEndOffsetPushLeftWithClose=(X=50.0,Y=0.0,Z=0.0)
    DoorOpenEndOffsetPushRightWithClose=(X=50.0,Y=0.0,Z=0.0)
    DoorOpenEndOffsetPullLeftWithClose=(X=50.0,Y=0.0,Z=0.0)
    DoorOpenEndOffsetPullRightWithClose=(X=50.0,Y=0.0,Z=0.0)
    DoorBashEndOffset=(X=50.0,Y=0.0,Z=0.0)
    LockerInvestigateOffset=(X=87.5340,Y=28.8460,Z=0.0)
    LockerAttackOffset=(X=87.5340,Y=28.8460,Z=0.0)
    BedInvestigateOffsetLeft=(X=-26.2150,Y=-176.1880,Z=0.0)
    BedInvestigateOffsetRight=(X=-26.2930,Y=176.5120,Z=0.0)
    BedAttackOffsetLeft=(X=-26.2150,Y=-176.1880,Z=0.0)
    BedAttackOffsetRight=(X=-26.2930,Y=176.5120,Z=0.0)
    GrabTargetVelocity=20.0
    SqueezeAttackOffset=(X=75.0,Y=29.60,Z=0.0)
    SwarmXplodBackOffset=150.0
    GrabDistance=100.0
    KillDistance=150.0
    ThrowStartPlayerDistance=77.90
    ThrowStartPlayerZOffset=42.60
    InstantKillDmgType=class'OLDmgType'
    AttackNormalDmgType=class'OLDmgType_GenericHit'
    AttackThrowDmgType=class'OLDmgType_GenericHit'
    AvoidRatePatrol=1.0
    AvoidRateInvestigate=1.0
    AvoidRateChase=1.0
    SoundSwitchDoorMaterial="Door_Material"
    SoundSwitchParamDMWood="Wood"
    SoundSwitchParamDMMetal="Metal_Gate"
    SoundSwitchParamDMSecurity="Security"
    SoundSwitchParamDMBigPrison="Metal_Prison_Gate"
    SoundSwitchWeaponType=WeaponType
    SoundSwitchWeaponTypeParams[0]=NoneWeapon
    SoundSwitchWeaponTypeParams[1]=Knife
    SoundSwitchWeaponTypeParams[2]=ButcherKnife
    SoundSwitchWeaponTypeParams[3]=BoneShear
    SoundSwitchWeaponTypeParams[4]=Machete
    SoundSwitchWeaponTypeParams[5]=NightStick
    SoundSwitchWeaponTypeParams[6]=Pipe
    SoundSwitchWeaponTypeParams[7]=WoodPlank
    SoundSwitchWeaponTypeParams[8]=WoodPlank
    AnimNameClimbUp50=climb_up_50cm
    AnimNameClimbUp100=climb_up_100cm
    AnimNameClimbDown50=climb_down_50cm
    AnimNameClimbDown100=climb_down_100cm
    AnimNameClimbUp50Chase=climb_up_50cm_chase
    AnimNameClimbUp100Chase=climb_up_100cm_chase
    AnimNameClimbDown50Chase=climb_down_50cm_chase
    AnimNameClimbDown100Chase=climb_down_100cm_chase
    AnimNameVault=vault
    AnimNameOpenDoorLeftPull=open_door_left_pull
    AnimNameOpenDoorLeftPush=open_door_left_push
    AnimNameOpenDoorRightPull=open_door_right_pull
    AnimNameOpenDoorRightPush=open_door_right_push
    AnimNameOpenDoorLeftPullWithClose=open_door_left_pull_close
    AnimNameOpenDoorLeftPushWithClose=open_door_left_push_close
    AnimNameOpenDoorRightPullWithClose=open_door_right_pull_close
    AnimNameOpenDoorRightPushWithClose=open_door_right_push_close
    AnimNameBashDoor=bash_door
    AnimNameBashDoorStart=bash_door_start
    AnimNameBashDoorLoop=bash_door_loop
    AnimNameBashDoorEnd=bash_door_end
    AnimNameBashDoorEndEquip=bash_door_end_equip
    AnimNameBashDoorFailed=bash_door_fail
    AnimNameBashDoorChase=bash_door_chase
    AnimNameNanoDoor=nano_door
    AnimNameAttack=attack
    AnimNameAttackLeft=attack_left
    AnimNameAttackRight=attack_right
    AnimNameAttackMiddle=attack_middle
    AnimNameGrabSqueezeRightStart=grab_squeeze_right_start
    AnimNameGrabSqueezeRightStartToWait=grab_squeeze_right_start_tr_wait
    AnimNameGrabSqueezeRightWait=grab_squeeze_right_wait
    AnimNameGrabSqueezeRightWaitToFail=grab_squeeze_right_wait_tr_fail
    AnimNameGrabSqueezeRightWaitToSuccess=grab_squeeze_right_wait_tr_success
    AnimNameGrabSqueezeRightSuccess=grab_squeeze_right_success
    AnimNameGrabSqueezeLeftStart=grab_squeeze_left_start
    AnimNameGrabSqueezeLeftStartToWait=grab_squeeze_left_start_tr_wait
    AnimNameGrabSqueezeLeftWait=grab_squeeze_left_wait
    AnimNameGrabSqueezeLeftWaitToFail=grab_squeeze_left_wait_tr_fail
    AnimNameGrabSqueezeLeftWaitToSuccess=grab_squeeze_left_wait_tr_success
    AnimNameGrabSqueezeLeftSuccess=grab_squeeze_left_success
    AnimNameBashWallChase=bash_wall_chase
    AnimNameBashTableChase=bash_table_chase
    AnimNameIdle=Idle
    AnimNameIdlePose=idle_pose
    AnimNameTurnOnSpotLeft90=idle_turn_left_90
    AnimNameTurnOnSpotLeft180=idle_turn_left_180
    AnimNameTurnOnSpotRight90=idle_turn_right_90
    AnimNameTurnOnSpotRight180=idle_turn_right_180
    AnimNameIdleChase=idle_chase
    AnimNameIdlePoseChase=idle_pose_chase
    AnimNameTurnOnSpotLeft90Chase=idle_turn_left_90_chase
    AnimNameTurnOnSpotLeft180Chase=idle_turn_left_180_chase
    AnimNameTurnOnSpotRight90Chase=idle_turn_right_90_chase
    AnimNameTurnOnSpotRight180Chase=idle_turn_right_180_chase
    AnimNameGrabNormal=grab_player
    AnimNameGrabCrouch=grab_player_crouch
    AnimNameGrabBedLeft=grab_bed_left
    AnimNameGrabBedRight=grab_bed_right
    AnimNameGrabUnder=grab_reach_under
    AnimNameGrabLocker=grab_locker
    AnimNameThrowPlayer=throw_player
    AnimNameThrowPlayerLeft90=throw_player_left_90
    AnimNameThrowPlayerLeft180=throw_player_left_180
    AnimNameThrowPlayerRight90=throw_player_right_90
    AnimNameThrowPlayerRight180=throw_player_right_180
    AnimNameSearchLocker=search_locker
    AnimNameSearchBedLeft=search_bed_left
    AnimNameSearchBedLeftAlt=search_bed_left_2
    AnimNameSearchBedRight=search_bed_right
    AnimNameSearchBedRightAlt=search_bed_right_2
    AnimNameGrabFatality=grab_fatality
    AnimNameRunChaseToIdleChase=run_chase_tr_idle_chase
    AnimNameWalkToIdle=walk_tr_idle
    AnimNamePushForward=push_forward
    AnimNamePushLeft=push_left
    AnimNamePushRight=push_right
    AnimNameAvoidLeft=avoid_left
    AnimNameAvoidRight=avoid_right
    AnimNameKnockbackLeft=knockback_left
    AnimNameKnockbackRight=knockback_right
    AnimNameEquipWeapon=equip
    AnimNameUnequipWeapon=unequip
    AnimNameChokeFatality=choke_fatality
    AnimNameBackstabFatality=backstab_fatality
    AnimNameClubFatalityBack=clubbin_fatality_back
    AnimNameClubFatalityFront=clubbin_fatality_front
    AnimNameStabChopFatality=stabbychop_fatality
    AnimNameFatalityXplodeBack=fatality_xplod_back
    AnimNameFatalityXplode=fatality_xplod
    AnimNameFatalityLocker=fatality_locker
    AnimNameDisturbedFrontLeft=disturbed_forward_left
    AnimNameDisturbedFrontRight=disturbed_forward_right
    AnimNameDisturbedLeft90=disturbed_left_90
    AnimNameDisturbedLeft180=disturbed_left_180
    AnimNameDisturbedRight90=disturbed_right_90
    AnimNameDisturbedRight180=disturbed_right_180
    SpecialMoveParams[17]=(GP=(RMM=ERootMotionMode.RMM_Accel),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[18]=(GP=(RMM=ERootMotionMode.RMM_Accel),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[28]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=15.0),bInterruptibleAfterTrigger=true,AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[71]=(GP=(RMM=ERootMotionMode.RMM_Accel))
    SpecialMoveParams[72]=(GP=(RMM=ERootMotionMode.RMM_Accel),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[73]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=5.0),AdjustPosition=true,AdjustOrientation=true,PositionningLinearVelocity=500.0,PositionningAngularVelocity=360.0)
    SpecialMoveParams[74]=(GP=(RMM=ERootMotionMode.RMM_Accel),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[75]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=5.0),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[76]=(GP=(RMM=ERootMotionMode.RMM_Accel),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[77]=(AdjustOrientation=true,PositionningAngularVelocity=360.0)
    SpecialMoveParams[79]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=5.0),AdjustPosition=true,AdjustOrientation=true,PositionningAngularVelocity=300.0)
    SpecialMoveParams[80]=(GP=(RMM=ERootMotionMode.RMM_Accel))
    SpecialMoveParams[81]=(GP=(RMM=ERootMotionMode.RMM_Accel))
    SpecialMoveParams[82]=(GP=(RMM=ERootMotionMode.RMM_Accel))
    SpecialMoveParams[83]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=5.0))
    SpecialMoveParams[84]=(GP=(RMM=ERootMotionMode.RMM_Accel))
    SpecialMoveParams[85]=(GP=(RMM=ERootMotionMode.RMM_Accel),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[86]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=5.0),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[87]=(GP=(RMM=ERootMotionMode.RMM_Accel),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[88]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=15.0),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[89]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=15.0),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[90]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=15.0),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[91]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=15.0),bInterruptibleAfterTrigger=true,AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[92]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionRadius=15.0),bInterruptibleAfterTrigger=true)
    SpecialMoveParams[93]=(GP=(RMM=ERootMotionMode.RMM_Accel,IgnorePawnCollisions=true,CollisionRadius=15.0))
    SpecialMoveParams[94]=(GP=(CollisionRadius=15.0))
    SpecialMoveParams[95]=(bExitOnBlendOut=true)
    SpecialMoveParams[96]=(GP=(RMM=ERootMotionMode.RMM_Accel,CollisionHeight=35.0,CollisionRadius=15.0),bExitOnBlendOut=true,bCollisionChangeOnTrigger=true,AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[97]=(GP=(RMM=ERootMotionMode.RMM_Accel,DisableCollisions=true),AdjustPosition=true,AdjustOrientation=true)
    SpecialMoveParams[98]=(GP=(RMM=ERootMotionMode.RMM_Accel))
    SpecialMoveParams[99]=(GP=(RMM=ERootMotionMode.RMM_Accel),bNoAnim=true,AdjustPosition=true,AdjustOrientation=true,PositionningLinearVelocity=100.0,PositionningAngularVelocity=360.0)
    SpecialMoveParams[100]=(bNoAnim=true,AdjustPosition=true,PositionningLinearVelocity=100.0)
    bRepelsAI=true
    LightEnvironment=DynamicLightEnvironmentComponent'Default__OLEnemyPawn.MyLightEnvironment'
    HeadBoneName=NPCMedium-Head
    FootStepSound_Walk=AkEvent'NPCs_Sounds.Footsteps_Walk_NPC'
    PawnAmbientSound=AudioComponent'Default__OLEnemyPawn.AmbientSoundComponent'
    HearingThreshold=2000.0
    BaseEyeHeight=172.60
    EyeHeight=172.60
    begin object name=WPawnSkeletalMeshComponent class=SkeletalMeshComponent
        SkeletalMesh=SkeletalMesh'02_Generic_Patient.Pawn.Generic_Patient'
        AnimTreeTemplate=AnimTree'02_Behaviors.Enemy.Enemy_AnimTree'
        PhysicsAsset=PhysicsAsset'02_Generic_Patient.Meshes.Patient_2_Physics'
        AnimSets(0)=AnimSet'03_NPCMedium_Generic.NpcMediumGeneric-01_AS'
        MinDistFactorForKinematicUpdate=0.20
        bHasPhysicsAssetInstance=true
        bOverrideAttachmentOwnerVisibility=true
        bChartDistanceFactor=true
        bCacheAnimSequenceNodes=false
        ReplacementPrimitive=none
        LightEnvironment=DynamicLightEnvironmentComponent'Default__OLEnemyPawn.MyLightEnvironment'
        MotionBlurInstanceScale=0.0
        RBChannel=ERBCollisionChannel.RBCC_Untitled3
        RBDominanceGroup=20
        bOwnerNoSee=true
        bUseOnePassLightingOnTranslucency=true
        BlockRigidBody=true
        RBCollideWithChannels=(Untitled3=true)
        Translation=(X=0.0,Y=0.0,Z=1.0)
    end object
    // Reference: SkeletalMeshComponent'Default__OLEnemyPawn.WPawnSkeletalMeshComponent'
    Mesh=WPawnSkeletalMeshComponent
    // Reference: CylinderComponent'Default__OLEnemyPawn.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    Components(0)=none
    // Reference: CylinderComponent'Default__OLEnemyPawn.CollisionCylinder'
    Components(1)=CollisionCylinder
    Components(2)=none
    Components(3)=DynamicLightEnvironmentComponent'Default__OLEnemyPawn.MyLightEnvironment'
    Components(4)=AudioComponent'Default__OLEnemyPawn.AmbientSoundComponent'
    // Reference: SkeletalMeshComponent'Default__OLEnemyPawn.WPawnSkeletalMeshComponent'
    Components(5)=WPawnSkeletalMeshComponent
    // Reference: CylinderComponent'Default__OLEnemyPawn.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}